using System;
using System.Collections.Generic;
using System.Linq;

namespace PersonsInfo
{
    public class Team
    {
        public string name { get; set; }
        public List<Person> firstTeam;
        public List<Person> reserveTeam;

        public IReadOnlyCollection<Person> FirstTeam
        {
            get
            {
                return this.firstTeam.AsReadOnly();
            }
        }

        public IReadOnlyCollection<Person> ReserveTeam
        {
            get
            {
                return this.reserveTeam.AsReadOnly();
            }
        }

        public Team(string name)
        {
            this.name = name;
            this.firstTeam = new List<Person>();
            this.reserveTeam = new List<Person>();
        }

        public void AddPlayer(Person person)
        {
            if (person.Age < 40)
            {
                firstTeam.Add(person);
            }
            else
            {
                this.reserveTeam.Add(person);
            }
        }
    }

        public class Person
        {
            private string ValidFirstName(string firstName)
            {
                if (firstName.Length < 3)
                {
                    throw new ArgumentException("First name cannot contain fewer than 3 symbols!");
                }
                return firstName;
            }
            private string ValidLastName(string lastName)
            {
                if (lastName.Length < 3)
                {
                    throw new ArgumentException("Last name cannot contain fewer than 3 symbols!");
                }
                return lastName;
            }

            private string firstName;
            private string lastName;
            private int age;
            private decimal salary;
            public string FirstName
            {
                get
                {
                    return this.firstName;
                }
                private set
                {
                    this.firstName = ValidFirstName(value);
                }
            }
            public string LastName
            {
                get
                {
                    return this.lastName;
                }
                private set
                {
                    this.lastName = ValidLastName(value);
                }
            }

            private int ValidAge(int age)
            {
                if (age <= 0)
                {
                    throw new ArgumentException("Age cannot be zero or a negative integer!");
                }
                return age;
            }

            public int Age
            {
                get
                {
                    return this.age;
                }
                private set
                {
                    this.age = ValidAge(value);
                }
            }

            private decimal ValidSalary(decimal salary)
            {
                if (salary < 650)
                {
                    throw new ArgumentException("Salary cannot be less than 650 leva!");
                }
                return salary;
            }

            public decimal Salary
            {
                get
                {
                    return this.salary;
                }
                private set
                {
                    this.salary = ValidSalary(value);
                }
            }
            public void IncreaseSalary(decimal percentage)
            {
                if (this.Age > 30)
                {
                    this.Salary += this.Salary * percentage / 100;
                }
                else
                {
                    this.Salary += this.Salary * percentage / 200;
                }

            }

            public Person(string firstName, string lastName
                , int age, decimal salary)
            {
                this.FirstName = firstName;
                this.LastName = lastName;
                this.Age = age;
                this.Salary = salary;
            }
            public override string ToString()
            {
                return $"{this.FirstName} {this.LastName} receives {this.Salary:F2} leva.";
            }
        }
        public class StartUp
        {
            static void Main(string[] args)
            {
                Team team = new Team("SoftUni");
                var lines = int.Parse(Console.ReadLine());
                var persons = new List<Person>();
                for (int i = 0; i < lines; i++)
                {
                    var cmdArgs = Console.ReadLine().Split();
                    var person = new Person(cmdArgs[0],
                                            cmdArgs[1],
                                            int.Parse(cmdArgs[2]),
                                            decimal.Parse(cmdArgs[3]));

                    persons.Add(person);
                }

                foreach (Person person in persons)
                {
                    team.AddPlayer(person);
                }

                Console.WriteLine("First team has "+team.FirstTeam.Count+" players.");
                Console.WriteLine("Second team has "+team.ReserveTeam.Count+" players.");
            }
        }
    }

